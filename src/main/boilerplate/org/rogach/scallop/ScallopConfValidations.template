package org.rogach.scallop

/** Helper trait for generaton of `validate` methods on ScallopConf. */
trait ScallopConfValidations { this: ScallopConfBase =>

  protected var validations: List[() => Either[String, Unit]] = Nil

  [#
  /** Adds a validation function to this configuration. This function will be run after all other verification steps.
    * Automatically defines co-dependent relationship on these options.
    * @param fn Validation function. In case of error, it should return Left with the error message.
    */
  def validate[[#A1#]]([#o1: ScallopOption[A1]#])(fn: ([#A1#]) => Either[String, Unit]): Unit = {
    allDefinedOrUndefined([#o1#])
    validations :+= { () =>
      if (List([#o1.toOption#]).forall(_.isDefined)) {
        fn([#o1()#])
      } else {
        Right(())
      }
    }
  }#
  ]

  [#
  /** Adds a validation function to this configuration. This function will be run after all other verification steps.
    * @param fn Validation function. In case of error, it should return Left with the error message.
    */
  def validateOpt[[#A1#]]([#o1: ScallopOption[A1]#])(fn: ([#Option[A1]#]) => Either[String, Unit]): Unit = {
    validations :+= { () =>
      fn([#o1.toOption#])
    }
  }#
  ]
}
