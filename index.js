Index.PACKAGES = {"org" : [], "org.rogach" : [], "org.rogach.scallop" : [{"name" : "org.rogach.scallop.ArgType", "shortDescription" : "An enumeration of possible arg types by number of arguments they can take.", "object" : "org\/rogach\/scallop\/ArgType$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/rogach\/scallop\/ArgType$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/rogach\/scallop\/ArgType$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/rogach\/scallop\/ArgType$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "LIST", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.LIST", "link" : "org\/rogach\/scallop\/ArgType$.html#LIST:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "SINGLE", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.SINGLE", "link" : "org\/rogach\/scallop\/ArgType$.html#SINGLE:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "FLAG", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.FLAG", "link" : "org\/rogach\/scallop\/ArgType$.html#FLAG:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "V", "tail" : "", "member" : "org.rogach.scallop.ArgType.V", "link" : "org\/rogach\/scallop\/ArgType$.html#Vextendsorg.rogach.scallop.ArgType.ValwithProductwithSerializable", "kind" : "case class"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/rogach\/scallop\/ArgType$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/rogach\/scallop\/ArgType$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/rogach\/scallop\/ArgType$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/rogach\/scallop\/ArgType$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/rogach\/scallop\/ArgType$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/rogach\/scallop\/ArgType$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/rogach\/scallop\/ArgType$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/rogach\/scallop\/ArgType$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/rogach\/scallop\/ArgType$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/rogach\/scallop\/ArgType$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/rogach\/scallop\/ArgType$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/rogach\/scallop\/ArgType$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ArgType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ArgType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ArgType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ArgType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ArgType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ArgType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ArgType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ArgType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ArgType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ArgType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ArgType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ArgType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ArgType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ArgType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ArgType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.CliOption", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/CliOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/CliOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/CliOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/CliOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/CliOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/CliOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/CliOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/CliOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/CliOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/CliOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/CliOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/CliOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/CliOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/CliOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/CliOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/CliOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, Option[String])]", "member" : "org.rogach.scallop.CliOption.helpInfo", "link" : "org\/rogach\/scallop\/CliOption.html#helpInfo(sh:List[Char]):List[(String,String,Option[String])]", "kind" : "abstract def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.CliOption.argLine", "link" : "org\/rogach\/scallop\/CliOption.html#argLine(sh:List[Char]):String", "kind" : "abstract def"}, {"label" : "hidden", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.hidden", "link" : "org\/rogach\/scallop\/CliOption.html#hidden:Boolean", "kind" : "abstract def"}, {"label" : "default", "tail" : "(): () ⇒ Option[Any]", "member" : "org.rogach.scallop.CliOption.default", "link" : "org\/rogach\/scallop\/CliOption.html#default:()=>Option[Any]", "kind" : "abstract def"}, {"label" : "validator", "tail" : "(): (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.CliOption.validator", "link" : "org\/rogach\/scallop\/CliOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "abstract def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.required", "link" : "org\/rogach\/scallop\/CliOption.html#required:Boolean", "kind" : "abstract def"}, {"label" : "descr", "tail" : "(): String", "member" : "org.rogach.scallop.CliOption.descr", "link" : "org\/rogach\/scallop\/CliOption.html#descr:String", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "org.rogach.scallop.CliOption.name", "link" : "org\/rogach\/scallop\/CliOption.html#name:String", "kind" : "abstract def"}, {"label" : "converter", "tail" : "(): ValueConverter[_]", "member" : "org.rogach.scallop.CliOption.converter", "link" : "org\/rogach\/scallop\/CliOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "abstract def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.isPositional", "link" : "org\/rogach\/scallop\/CliOption.html#isPositional:Boolean", "kind" : "abstract def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.CliOption.shortNames", "link" : "org\/rogach\/scallop\/CliOption.html#shortNames:List[Char]", "kind" : "abstract def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.CliOption.requiredShortNames", "link" : "org\/rogach\/scallop\/CliOption.html#requiredShortNames:List[Char]", "kind" : "abstract def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.CliOption.longNames", "link" : "org\/rogach\/scallop\/CliOption.html#longNames:List[String]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/rogach\/scallop\/CliOption.html", "kind" : "trait"}, {"name" : "org.rogach.scallop.Formatter", "shortDescription" : "", "object" : "org\/rogach\/scallop\/Formatter$.html", "members_object" : [{"label" : "wrap", "tail" : "(s: Seq[String], width: Int): List[String]", "member" : "org.rogach.scallop.Formatter.wrap", "link" : "org\/rogach\/scallop\/Formatter$.html#wrap(s:Seq[String],width:Int):List[String]", "kind" : "def"}, {"label" : "format", "tail" : "(s: List[Option[(String, String, Option[String])]], width: Option[Int], appendDefault: Boolean): String", "member" : "org.rogach.scallop.Formatter.format", "link" : "org\/rogach\/scallop\/Formatter$.html#format(s:List[Option[(String,String,Option[String])]],width:Option[Int],appendDefault:Boolean):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Formatter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Formatter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Formatter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Formatter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Formatter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Formatter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Formatter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Formatter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Formatter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Formatter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Formatter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Formatter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Formatter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Formatter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Formatter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Formatter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.LazyMap", "shortDescription" : "A class, that lazily encapsulates a map inside.", "members_class" : [{"label" : "ImmutableDefaultKeySet", "tail" : "", "member" : "scala.collection.immutable.MapLike.ImmutableDefaultKeySet", "link" : "org\/rogach\/scallop\/LazyMap.html#ImmutableDefaultKeySetextendsMapLike.this.DefaultKeySetwithSet[K]", "kind" : "class"}, {"label" : "MappedValues", "tail" : "", "member" : "scala.collection.MapLike.MappedValues", "link" : "org\/rogach\/scallop\/LazyMap.html#MappedValues[W<:<?>]extendsAbstractMap[K,W]withDefaultMap[K,W]", "kind" : "class"}, {"label" : "FilteredKeys", "tail" : "", "member" : "scala.collection.MapLike.FilteredKeys", "link" : "org\/rogach\/scallop\/LazyMap.html#FilteredKeysextendsAbstractMap[K,V]withDefaultMap[K,V]", "kind" : "class"}, {"label" : "DefaultValuesIterable", "tail" : "", "member" : "scala.collection.MapLike.DefaultValuesIterable", "link" : "org\/rogach\/scallop\/LazyMap.html#DefaultValuesIterableextendsAbstractIterable[V]withIterable[V]withSerializable", "kind" : "class"}, {"label" : "DefaultKeySet", "tail" : "", "member" : "scala.collection.MapLike.DefaultKeySet", "link" : "org\/rogach\/scallop\/LazyMap.html#DefaultKeySetextendsAbstractSet[K]withSet[K]withSerializable", "kind" : "class"}, {"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "org\/rogach\/scallop\/LazyMap.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "-", "tail" : "(key: A): Map[A, B]", "member" : "org.rogach.scallop.LazyMap.-", "link" : "org\/rogach\/scallop\/LazyMap.html#-(key:A):Map[A,B]", "kind" : "def"}, {"label" : "+", "tail" : "(kv: (A, B1)): Map[A, B1]", "member" : "org.rogach.scallop.LazyMap.+", "link" : "org\/rogach\/scallop\/LazyMap.html#+[B1>:B](kv:(A,B1)):Map[A,B1]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(A, B)]", "member" : "org.rogach.scallop.LazyMap.iterator", "link" : "org\/rogach\/scallop\/LazyMap.html#iterator:Iterator[(A,B)]", "kind" : "def"}, {"label" : "get", "tail" : "(key: A): Option[B]", "member" : "org.rogach.scallop.LazyMap.get", "link" : "org\/rogach\/scallop\/LazyMap.html#get(key:A):Option[B]", "kind" : "def"}, {"label" : "m", "tail" : ": Map[A, B]", "member" : "org.rogach.scallop.LazyMap.m", "link" : "org\/rogach\/scallop\/LazyMap.html#m:Map[A,B]", "kind" : "lazy val"}, {"member" : "org.rogach.scallop.LazyMap#<init>", "error" : "unsupported entity"}, {"label" : "withDefaultValue", "tail" : "(d: V1): Map[A, V1]", "member" : "scala.collection.immutable.Map.withDefaultValue", "link" : "org\/rogach\/scallop\/LazyMap.html#withDefaultValue[V1>:V](d:V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "withDefault", "tail" : "(d: (A) ⇒ V1): Map[A, V1]", "member" : "scala.collection.immutable.Map.withDefault", "link" : "org\/rogach\/scallop\/LazyMap.html#withDefault[V1>:V](d:K=>V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "seq", "tail" : "(): Map[A, B]", "member" : "scala.collection.immutable.Map.seq", "link" : "org\/rogach\/scallop\/LazyMap.html#seq:scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(A, B), (T, U)]): Map[T, U]", "member" : "scala.collection.immutable.Map.toMap", "link" : "org\/rogach\/scallop\/LazyMap.html#toMap[T,U](implicitev:<:<[(K,V),(T,U)]):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Map[A, B]", "member" : "scala.collection.immutable.Map.empty", "link" : "org\/rogach\/scallop\/LazyMap.html#empty:scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (A, B) ⇒ W)(bf: CanBuildFrom[Map[A, B], (A, W), That]): That", "member" : "scala.collection.immutable.MapLike.transform", "link" : "org\/rogach\/scallop\/LazyMap.html#transform[W,That](f:(K,V)=>W)(implicitbf:scala.collection.generic.CanBuildFrom[This,(K,W),That]):That", "kind" : "def"}, {"label" : "keySet", "tail" : "(): Set[A]", "member" : "scala.collection.immutable.MapLike.keySet", "link" : "org\/rogach\/scallop\/LazyMap.html#keySet:scala.collection.immutable.Set[K]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (B) ⇒ W): Map[A, W]", "member" : "scala.collection.immutable.MapLike.mapValues", "link" : "org\/rogach\/scallop\/LazyMap.html#mapValues[W](f:V=>W):scala.collection.immutable.Map[K,W]", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (A) ⇒ Boolean): Map[A, B]", "member" : "scala.collection.immutable.MapLike.filterKeys", "link" : "org\/rogach\/scallop\/LazyMap.html#filterKeys(p:K=>Boolean):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "++", "tail" : "(xs: GenTraversableOnce[(A, V1)]): Map[A, V1]", "member" : "scala.collection.immutable.MapLike.++", "link" : "org\/rogach\/scallop\/LazyMap.html#++[V1>:V](xs:scala.collection.GenTraversableOnce[(K,V1)]):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: (A, V1), elem2: (A, V1), elems: (A, V1)*): Map[A, V1]", "member" : "scala.collection.immutable.MapLike.+", "link" : "org\/rogach\/scallop\/LazyMap.html#+[V1>:V](elem1:(K,V1),elem2:(K,V1),elems:(K,V1)*):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "updated", "tail" : "(key: A, value: V1): Map[A, V1]", "member" : "scala.collection.immutable.MapLike.updated", "link" : "org\/rogach\/scallop\/LazyMap.html#updated[V1>:V](key:K,value:V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[(A, B), ParMap[A, B]]", "member" : "scala.collection.immutable.MapLike.parCombiner", "link" : "org\/rogach\/scallop\/LazyMap.html#parCombiner:scala.collection.parallel.Combiner[(K,V),scala.collection.parallel.immutable.ParMap[K,V]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.MapLike.toString", "link" : "org\/rogach\/scallop\/LazyMap.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.MapLike.stringPrefix", "link" : "org\/rogach\/scallop\/LazyMap.html#stringPrefix:String", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.MapLike.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[E]", "member" : "scala.collection.MapLike.toBuffer", "link" : "org\/rogach\/scallop\/LazyMap.html#toBuffer[E>:(K,V)]:scala.collection.mutable.Buffer[E]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(A, B)]", "member" : "scala.collection.MapLike.toSeq", "link" : "org\/rogach\/scallop\/LazyMap.html#toSeq:Seq[(K,V)]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: ((A, B)) ⇒ Boolean): Map[A, B]", "member" : "scala.collection.MapLike.filterNot", "link" : "org\/rogach\/scallop\/LazyMap.html#filterNot(p:((K,V))=>Boolean):This", "kind" : "def"}, {"label" : "default", "tail" : "(key: A): B", "member" : "scala.collection.MapLike.default", "link" : "org\/rogach\/scallop\/LazyMap.html#default(key:K):V", "kind" : "def"}, {"label" : "valuesIterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.MapLike.valuesIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#valuesIterator:Iterator[V]", "kind" : "def"}, {"label" : "values", "tail" : "(): Iterable[B]", "member" : "scala.collection.MapLike.values", "link" : "org\/rogach\/scallop\/LazyMap.html#values:Iterable[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Iterable[A]", "member" : "scala.collection.MapLike.keys", "link" : "org\/rogach\/scallop\/LazyMap.html#keys:Iterable[K]", "kind" : "def"}, {"label" : "keysIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.MapLike.keysIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#keysIterator:Iterator[K]", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: K1, default: (K1) ⇒ V1): V1", "member" : "scala.collection.MapLike.applyOrElse", "link" : "org\/rogach\/scallop\/LazyMap.html#applyOrElse[K1<:K,V1>:V](x:K1,default:K1=>V1):V1", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(key: A): Boolean", "member" : "scala.collection.MapLike.isDefinedAt", "link" : "org\/rogach\/scallop\/LazyMap.html#isDefinedAt(key:K):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(key: A): Boolean", "member" : "scala.collection.MapLike.contains", "link" : "org\/rogach\/scallop\/LazyMap.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(key: A): B", "member" : "scala.collection.MapLike.apply", "link" : "org\/rogach\/scallop\/LazyMap.html#apply(key:K):V", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(key: A, default: ⇒ V1): V1", "member" : "scala.collection.MapLike.getOrElse", "link" : "org\/rogach\/scallop\/LazyMap.html#getOrElse[V1>:V](key:K,default:=>V1):V1", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.MapLike.isEmpty", "link" : "org\/rogach\/scallop\/LazyMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[(A, B), Map[A, B]]", "member" : "scala.collection.MapLike.newBuilder", "link" : "org\/rogach\/scallop\/LazyMap.html#newBuilder:scala.collection.mutable.Builder[(K,V),This]", "kind" : "def"}, {"label" : "--", "tail" : "(xs: GenTraversableOnce[A]): Map[A, B]", "member" : "scala.collection.generic.Subtractable.--", "link" : "org\/rogach\/scallop\/LazyMap.html#--(xs:scala.collection.GenTraversableOnce[A]):Repr", "kind" : "def"}, {"label" : "-", "tail" : "(elem1: A, elem2: A, elems: A*): Map[A, B]", "member" : "scala.collection.generic.Subtractable.-", "link" : "org\/rogach\/scallop\/LazyMap.html#-(elem1:A,elem2:A,elems:A*):Repr", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (B) ⇒ U): (A) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "org\/rogach\/scallop\/LazyMap.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "lift", "tail" : "(): (A) ⇒ Option[B]", "member" : "scala.PartialFunction.lift", "link" : "org\/rogach\/scallop\/LazyMap.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (B) ⇒ C): PartialFunction[A, C]", "member" : "scala.PartialFunction.andThen", "link" : "org\/rogach\/scallop\/LazyMap.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "org\/rogach\/scallop\/LazyMap.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ A): (A) ⇒ B", "member" : "scala.Function1.compose", "link" : "org\/rogach\/scallop\/LazyMap.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenMapLike.equals", "link" : "org\/rogach\/scallop\/LazyMap.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.GenMapLike.hashCode", "link" : "org\/rogach\/scallop\/LazyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Iterable]", "member" : "scala.collection.immutable.Iterable.companion", "link" : "org\/rogach\/scallop\/LazyMap.html#companion:scala.collection.generic.GenericCompanion[scala.collection.immutable.Iterable]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[(A, B), Map[A, B]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/rogach\/scallop\/LazyMap.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[(A, B), Map[A, B]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/rogach\/scallop\/LazyMap.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "org\/rogach\/scallop\/LazyMap.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[(A, B)]", "member" : "scala.collection.IterableLike.toStream", "link" : "org\/rogach\/scallop\/LazyMap.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "org\/rogach\/scallop\/LazyMap.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Map[A, B], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "org\/rogach\/scallop\/LazyMap.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Map[A, B], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "org\/rogach\/scallop\/LazyMap.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Map[A, B], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "org\/rogach\/scallop\/LazyMap.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableLike.dropRight", "link" : "org\/rogach\/scallop\/LazyMap.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableLike.takeRight", "link" : "org\/rogach\/scallop\/LazyMap.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/rogach\/scallop\/LazyMap.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/rogach\/scallop\/LazyMap.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableLike.grouped", "link" : "org\/rogach\/scallop\/LazyMap.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((A, B)) ⇒ Boolean): Map[A, B]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "org\/rogach\/scallop\/LazyMap.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableLike.drop", "link" : "org\/rogach\/scallop\/LazyMap.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableLike.take", "link" : "org\/rogach\/scallop\/LazyMap.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Map[A, B]", "member" : "scala.collection.IterableLike.slice", "link" : "org\/rogach\/scallop\/LazyMap.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): (A, B)", "member" : "scala.collection.IterableLike.head", "link" : "org\/rogach\/scallop\/LazyMap.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(A, B)]", "member" : "scala.collection.IterableLike.toIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[(A, B)]", "member" : "scala.collection.IterableLike.toIterable", "link" : "org\/rogach\/scallop\/LazyMap.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((A, B), B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((A, B), B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "org\/rogach\/scallop\/LazyMap.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((A, B)) ⇒ Boolean): Option[(A, B)]", "member" : "scala.collection.IterableLike.find", "link" : "org\/rogach\/scallop\/LazyMap.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((A, B)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "org\/rogach\/scallop\/LazyMap.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((A, B)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "org\/rogach\/scallop\/LazyMap.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((A, B)) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "org\/rogach\/scallop\/LazyMap.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Map[A, B]): Iterable[(A, B)]", "member" : "scala.collection.IterableLike.toCollection", "link" : "org\/rogach\/scallop\/LazyMap.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[(A, B)]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "org\/rogach\/scallop\/LazyMap.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: ((A, B)) ⇒ GenTraversableOnce[B]): Iterable[Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "org\/rogach\/scallop\/LazyMap.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: ((A, B)) ⇒ GenTraversableOnce[B]): Iterable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "org\/rogach\/scallop\/LazyMap.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((A, B)) ⇒ (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "org\/rogach\/scallop\/LazyMap.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((A, B)) ⇒ (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "org\/rogach\/scallop\/LazyMap.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "org\/rogach\/scallop\/LazyMap.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((A, B)) ⇒ Boolean): FilterMonadic[(A, B), Map[A, B]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "org\/rogach\/scallop\/LazyMap.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, (A, B), Col[(A, B)]]): Col[(A, B)]", "member" : "scala.collection.TraversableLike.to", "link" : "org\/rogach\/scallop\/LazyMap.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(A, B)]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "org\/rogach\/scallop\/LazyMap.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Map[A, B]]", "member" : "scala.collection.TraversableLike.inits", "link" : "org\/rogach\/scallop\/LazyMap.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Map[A, B]]", "member" : "scala.collection.TraversableLike.tails", "link" : "org\/rogach\/scallop\/LazyMap.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Map[A, B], Map[A, B])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "org\/rogach\/scallop\/LazyMap.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((A, B)) ⇒ Boolean): (Map[A, B], Map[A, B])", "member" : "scala.collection.TraversableLike.span", "link" : "org\/rogach\/scallop\/LazyMap.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((A, B)) ⇒ Boolean): Map[A, B]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "org\/rogach\/scallop\/LazyMap.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Map[A, B]", "member" : "scala.collection.TraversableLike.init", "link" : "org\/rogach\/scallop\/LazyMap.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "org\/rogach\/scallop\/LazyMap.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (A, B)", "member" : "scala.collection.TraversableLike.last", "link" : "org\/rogach\/scallop\/LazyMap.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Map[A, B]", "member" : "scala.collection.TraversableLike.tail", "link" : "org\/rogach\/scallop\/LazyMap.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.TraversableLike.headOption", "link" : "org\/rogach\/scallop\/LazyMap.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((A, B), B) ⇒ B)(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "org\/rogach\/scallop\/LazyMap.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (A, B)) ⇒ B)(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "org\/rogach\/scallop\/LazyMap.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((A, B)) ⇒ K): Map[K, Map[A, B]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "org\/rogach\/scallop\/LazyMap.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((A, B)) ⇒ Boolean): (Map[A, B], Map[A, B])", "member" : "scala.collection.TraversableLike.partition", "link" : "org\/rogach\/scallop\/LazyMap.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(A, B), B])(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "org\/rogach\/scallop\/LazyMap.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filter", "tail" : "(p: ((A, B)) ⇒ Boolean): Map[A, B]", "member" : "scala.collection.TraversableLike.filter", "link" : "org\/rogach\/scallop\/LazyMap.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((A, B)) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "org\/rogach\/scallop\/LazyMap.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((A, B)) ⇒ B)(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "org\/rogach\/scallop\/LazyMap.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/rogach\/scallop\/LazyMap.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/rogach\/scallop\/LazyMap.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Map[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "org\/rogach\/scallop\/LazyMap.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "org\/rogach\/scallop\/LazyMap.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "org\/rogach\/scallop\/LazyMap.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Map[A, B]", "member" : "scala.collection.TraversableLike.repr", "link" : "org\/rogach\/scallop\/LazyMap.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "org\/rogach\/scallop\/LazyMap.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParMap[A, B]", "member" : "scala.collection.Parallelizable.par", "link" : "org\/rogach\/scallop\/LazyMap.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(A, B)]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "org\/rogach\/scallop\/LazyMap.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "org\/rogach\/scallop\/LazyMap.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(A, B)]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "org\/rogach\/scallop\/LazyMap.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(A, B)]", "member" : "scala.collection.TraversableOnce.toList", "link" : "org\/rogach\/scallop\/LazyMap.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "org\/rogach\/scallop\/LazyMap.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((A, B)) ⇒ B)(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.TraversableOnce.minBy", "link" : "org\/rogach\/scallop\/LazyMap.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((A, B)) ⇒ B)(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "org\/rogach\/scallop\/LazyMap.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.TraversableOnce.max", "link" : "org\/rogach\/scallop\/LazyMap.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.TraversableOnce.min", "link" : "org\/rogach\/scallop\/LazyMap.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "org\/rogach\/scallop\/LazyMap.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "org\/rogach\/scallop\/LazyMap.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, (A, B)) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "org\/rogach\/scallop\/LazyMap.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "org\/rogach\/scallop\/LazyMap.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "org\/rogach\/scallop\/LazyMap.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((A, B), B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (A, B)) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (A, B)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (A, B)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((A, B), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "org\/rogach\/scallop\/LazyMap.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (A, B)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "org\/rogach\/scallop\/LazyMap.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(A, B), B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "org\/rogach\/scallop\/LazyMap.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((A, B)) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "org\/rogach\/scallop\/LazyMap.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "org\/rogach\/scallop\/LazyMap.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "org\/rogach\/scallop\/LazyMap.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[(A, B)]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "org\/rogach\/scallop\/LazyMap.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "org\/rogach\/scallop\/LazyMap.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/LazyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/LazyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/LazyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/LazyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/LazyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/LazyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/LazyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/LazyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/LazyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/LazyMap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/LazyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/LazyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/LazyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/LazyMap.html", "kind" : "class"}, {"name" : "org.rogach.scallop.LongNamedPropertyOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, None.type)]", "member" : "org.rogach.scallop.LongNamedPropertyOption.helpInfo", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#helpInfo(sh:List[Char]):List[(String,String,None.type)]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.LongNamedPropertyOption.argLine", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.required", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#required:Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(): () ⇒ Some[Map[Nothing, Nothing]]", "member" : "org.rogach.scallop.LongNamedPropertyOption.default", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#default:()=>Some[scala.collection.immutable.Map[Nothing,Nothing]]", "kind" : "def"}, {"label" : "validator", "tail" : "(): (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.validator", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.LongNamedPropertyOption.requiredShortNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.LongNamedPropertyOption.shortNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.LongNamedPropertyOption.longNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.isPositional", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.LongNamedPropertyOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.hidden", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "valueName", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.valueName", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#valueName:String", "kind" : "val"}, {"label" : "keyName", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.keyName", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#keyName:String", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.LongNamedPropertyOption.converter", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.descr", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#descr:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.name", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/LongNamedPropertyOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.NumberArgOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, Option[String])]", "member" : "org.rogach.scallop.NumberArgOption.helpInfo", "link" : "org\/rogach\/scallop\/NumberArgOption.html#helpInfo(sh:List[Char]):List[(String,String,Option[String])]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.NumberArgOption.argLine", "link" : "org\/rogach\/scallop\/NumberArgOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.NumberArgOption.requiredShortNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.NumberArgOption.shortNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.NumberArgOption.longNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.NumberArgOption.isPositional", "link" : "org\/rogach\/scallop\/NumberArgOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.NumberArgOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.NumberArgOption.hidden", "link" : "org\/rogach\/scallop\/NumberArgOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () ⇒ Option[Long]", "member" : "org.rogach.scallop.NumberArgOption.default", "link" : "org\/rogach\/scallop\/NumberArgOption.html#default:()=>Option[Long]", "kind" : "val"}, {"label" : "validator", "tail" : ": (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.NumberArgOption.validator", "link" : "org\/rogach\/scallop\/NumberArgOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[Long]", "member" : "org.rogach.scallop.NumberArgOption.converter", "link" : "org\/rogach\/scallop\/NumberArgOption.html#converter:org.rogach.scallop.ValueConverter[Long]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.NumberArgOption.descr", "link" : "org\/rogach\/scallop\/NumberArgOption.html#descr:String", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.NumberArgOption.required", "link" : "org\/rogach\/scallop\/NumberArgOption.html#required:Boolean", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.NumberArgOption.name", "link" : "org\/rogach\/scallop\/NumberArgOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/NumberArgOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/NumberArgOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/NumberArgOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/NumberArgOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/NumberArgOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/NumberArgOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/NumberArgOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/NumberArgOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/NumberArgOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/NumberArgOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/NumberArgOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/NumberArgOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/NumberArgOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/NumberArgOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.overrideColorOutput", "shortDescription" : "", "object" : "org\/rogach\/scallop\/overrideColorOutput$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.util.DynamicVariable.toString", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#toString():String", "kind" : "def"}, {"label" : "value_=", "tail" : "(newval: Option[Boolean]): Unit", "member" : "scala.util.DynamicVariable.value_=", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#value_=(newval:T):Unit", "kind" : "def"}, {"label" : "withValue", "tail" : "(newval: Option[Boolean])(thunk: ⇒ S): S", "member" : "scala.util.DynamicVariable.withValue", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#withValue[S](newval:T)(thunk:=>S):S", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[Boolean]", "member" : "scala.util.DynamicVariable.value", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#value:T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.PropertyOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, None.type)]", "member" : "org.rogach.scallop.PropertyOption.helpInfo", "link" : "org\/rogach\/scallop\/PropertyOption.html#helpInfo(sh:List[Char]):List[(String,String,None.type)]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.PropertyOption.argLine", "link" : "org\/rogach\/scallop\/PropertyOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.PropertyOption.required", "link" : "org\/rogach\/scallop\/PropertyOption.html#required:Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(): () ⇒ Some[Map[Nothing, Nothing]]", "member" : "org.rogach.scallop.PropertyOption.default", "link" : "org\/rogach\/scallop\/PropertyOption.html#default:()=>Some[scala.collection.immutable.Map[Nothing,Nothing]]", "kind" : "def"}, {"label" : "validator", "tail" : "(): (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.PropertyOption.validator", "link" : "org\/rogach\/scallop\/PropertyOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.PropertyOption.requiredShortNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.PropertyOption.shortNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.PropertyOption.longNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.PropertyOption.isPositional", "link" : "org\/rogach\/scallop\/PropertyOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.PropertyOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.PropertyOption.hidden", "link" : "org\/rogach\/scallop\/PropertyOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "valueName", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.valueName", "link" : "org\/rogach\/scallop\/PropertyOption.html#valueName:String", "kind" : "val"}, {"label" : "keyName", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.keyName", "link" : "org\/rogach\/scallop\/PropertyOption.html#keyName:String", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.PropertyOption.converter", "link" : "org\/rogach\/scallop\/PropertyOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.descr", "link" : "org\/rogach\/scallop\/PropertyOption.html#descr:String", "kind" : "val"}, {"label" : "short", "tail" : ": Char", "member" : "org.rogach.scallop.PropertyOption.short", "link" : "org\/rogach\/scallop\/PropertyOption.html#short:Char", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.name", "link" : "org\/rogach\/scallop\/PropertyOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/PropertyOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/PropertyOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/PropertyOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/PropertyOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/PropertyOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/PropertyOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/PropertyOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/PropertyOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/PropertyOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/PropertyOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/PropertyOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/PropertyOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/PropertyOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/PropertyOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.Scallop", "shortDescription" : "The creator and god of all parsers :)", "object" : "org\/rogach\/scallop\/Scallop$.html", "members_object" : [{"label" : "apply", "tail" : "(): Scallop", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop$.html#apply():org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "apply", "tail" : "(args: Seq[String]): Scallop", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop$.html#apply(args:Seq[String]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Scallop$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Scallop$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Scallop$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Scallop$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Scallop$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Scallop$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Scallop$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Scallop$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Scallop$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Scallop$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Scallop$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Scallop$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Scallop$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Scallop$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Scallop$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Scallop$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.Scallop.summary", "link" : "org\/rogach\/scallop\/Scallop.html#summary:String", "kind" : "def"}, {"label" : "verify", "tail" : "(): Scallop", "member" : "org.rogach.scallop.Scallop.verify", "link" : "org\/rogach\/scallop\/Scallop.html#verify:org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "prop", "tail" : "(name: Char, key: String)(tt: scala.reflect.api.JavaUniverse.TypeTag[Map[String, A]]): Option[A]", "member" : "org.rogach.scallop.Scallop.prop", "link" : "org\/rogach\/scallop\/Scallop.html#prop[A](name:Char,key:String)(implicittt:reflect.runtime.universe.TypeTag[Map[String,A]]):Option[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: Char)(tt: scala.reflect.api.JavaUniverse.TypeTag[A]): A", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop.html#apply[A](name:Char)(implicittt:reflect.runtime.universe.TypeTag[A]):A", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String)(tt: scala.reflect.api.JavaUniverse.TypeTag[A]): A", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop.html#apply[A](name:String)(implicittt:reflect.runtime.universe.TypeTag[A]):A", "kind" : "def"}, {"label" : "get", "tail" : "(name: Char)(tt: scala.reflect.api.JavaUniverse.TypeTag[A]): Option[A]", "member" : "org.rogach.scallop.Scallop.get", "link" : "org\/rogach\/scallop\/Scallop.html#get[A](name:Char)(implicittt:reflect.runtime.universe.TypeTag[A]):Option[A]", "kind" : "def"}, {"label" : "get", "tail" : "(name: String)(tt: scala.reflect.api.JavaUniverse.TypeTag[A]): Option[A]", "member" : "org.rogach.scallop.Scallop.get", "link" : "org\/rogach\/scallop\/Scallop.html#get[A](name:String)(implicittt:reflect.runtime.universe.TypeTag[A]):Option[A]", "kind" : "def"}, {"label" : "isSupplied", "tail" : "(name: String): Boolean", "member" : "org.rogach.scallop.Scallop.isSupplied", "link" : "org\/rogach\/scallop\/Scallop.html#isSupplied(name:String):Boolean", "kind" : "def"}, {"label" : "args", "tail" : "(a: Seq[String]): Scallop", "member" : "org.rogach.scallop.Scallop.args", "link" : "org\/rogach\/scallop\/Scallop.html#args(a:Seq[String]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.Scallop.printHelp", "link" : "org\/rogach\/scallop\/Scallop.html#printHelp():Unit", "kind" : "def"}, {"label" : "help", "tail" : "(): String", "member" : "org.rogach.scallop.Scallop.help", "link" : "org\/rogach\/scallop\/Scallop.html#help:String", "kind" : "def"}, {"label" : "setHelpWidth", "tail" : "(w: Int): Scallop", "member" : "org.rogach.scallop.Scallop.setHelpWidth", "link" : "org\/rogach\/scallop\/Scallop.html#setHelpWidth(w:Int):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Scallop", "member" : "org.rogach.scallop.Scallop.footer", "link" : "org\/rogach\/scallop\/Scallop.html#footer(f:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Scallop", "member" : "org.rogach.scallop.Scallop.banner", "link" : "org\/rogach\/scallop\/Scallop.html#banner(b:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Scallop", "member" : "org.rogach.scallop.Scallop.version", "link" : "org\/rogach\/scallop\/Scallop.html#version(v:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "getAllSuppliedOptionNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getAllSuppliedOptionNames", "link" : "org\/rogach\/scallop\/Scallop.html#getAllSuppliedOptionNames:List[String]", "kind" : "def"}, {"label" : "getSubcommandNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandNames", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandNames:List[String]", "kind" : "def"}, {"label" : "getSubcommandArgs", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandArgs", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandArgs:List[String]", "kind" : "def"}, {"label" : "getSubbuilder", "tail" : "(): Option[Scallop]", "member" : "org.rogach.scallop.Scallop.getSubbuilder", "link" : "org\/rogach\/scallop\/Scallop.html#getSubbuilder:Option[org.rogach.scallop.Scallop]", "kind" : "def"}, {"label" : "getSubcommandName", "tail" : "(): Option[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandName", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandName:Option[String]", "kind" : "def"}, {"label" : "findSubbuilder", "tail" : "(name: String): Option[Scallop]", "member" : "org.rogach.scallop.Scallop.findSubbuilder", "link" : "org\/rogach\/scallop\/Scallop.html#findSubbuilder(name:String):Option[org.rogach.scallop.Scallop]", "kind" : "def"}, {"label" : "addSubBuilder", "tail" : "(nameAndAliases: Seq[String], builder: Scallop): Scallop", "member" : "org.rogach.scallop.Scallop.addSubBuilder", "link" : "org\/rogach\/scallop\/Scallop.html#addSubBuilder(nameAndAliases:Seq[String],builder:org.rogach.scallop.Scallop):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "toggle", "tail" : "(name: String, default: () ⇒ Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): Scallop", "member" : "org.rogach.scallop.Scallop.toggle", "link" : "org\/rogach\/scallop\/Scallop.html#toggle(name:String,default:()=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, required: Boolean, descr: String, default: () ⇒ Option[Long], validate: (Long) ⇒ Boolean, hidden: Boolean)(conv: ValueConverter[Long]): Scallop", "member" : "org.rogach.scallop.Scallop.number", "link" : "org\/rogach\/scallop\/Scallop.html#number(name:String,required:Boolean,descr:String,default:()=>Option[Long],validate:Long=>Boolean,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, required: Boolean, descr: String, default: () ⇒ Option[A], validate: (A) ⇒ Boolean, hidden: Boolean)(conv: ValueConverter[A]): Scallop", "member" : "org.rogach.scallop.Scallop.trailArg", "link" : "org\/rogach\/scallop\/Scallop.html#trailArg[A](name:String,required:Boolean,descr:String,default:()=>Option[A],validate:A=>Boolean,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Scallop", "member" : "org.rogach.scallop.Scallop.propsLong", "link" : "org\/rogach\/scallop\/Scallop.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Scallop", "member" : "org.rogach.scallop.Scallop.props", "link" : "org\/rogach\/scallop\/Scallop.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: () ⇒ Option[A], validate: (A) ⇒ Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): Scallop", "member" : "org.rogach.scallop.Scallop.opt", "link" : "org\/rogach\/scallop\/Scallop.html#opt[A](name:String,short:Char,descr:String,default:()=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "getOptionShortNames", "tail" : "(opt: CliOption): List[Char]", "member" : "org.rogach.scallop.Scallop.getOptionShortNames", "link" : "org\/rogach\/scallop\/Scallop.html#getOptionShortNames(opt:org.rogach.scallop.CliOption):List[Char]", "kind" : "def"}, {"label" : "getOptionWithShortName", "tail" : "(c: Char): Option[CliOption]", "member" : "org.rogach.scallop.Scallop.getOptionWithShortName", "link" : "org\/rogach\/scallop\/Scallop.html#getOptionWithShortName(c:Char):Option[org.rogach.scallop.CliOption]", "kind" : "def"}, {"label" : "ParseResult", "tail" : "", "member" : "org.rogach.scallop.Scallop.ParseResult", "link" : "org\/rogach\/scallop\/Scallop.html#ParseResultextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parsed", "tail" : "", "member" : "org.rogach.scallop.Scallop.Parsed", "link" : "org\/rogach\/scallop\/Scallop.html#Parsed=List[(org.rogach.scallop.CliOption,(String,List[String]))]", "kind" : "type"}, {"member" : "org.rogach.scallop.Scallop#<init>", "error" : "unsupported entity"}, {"label" : "parent", "tail" : ": Option[Scallop]", "member" : "org.rogach.scallop.Scallop.parent", "link" : "org\/rogach\/scallop\/Scallop.html#parent:Option[org.rogach.scallop.Scallop]", "kind" : "var"}, {"label" : "subbuilders", "tail" : ": List[(String, Scallop)]", "member" : "org.rogach.scallop.Scallop.subbuilders", "link" : "org\/rogach\/scallop\/Scallop.html#subbuilders:List[(String,org.rogach.scallop.Scallop)]", "kind" : "val"}, {"label" : "appendDefaultToDescription", "tail" : ": Boolean", "member" : "org.rogach.scallop.Scallop.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/Scallop.html#appendDefaultToDescription:Boolean", "kind" : "val"}, {"label" : "shortSubcommandsHelp", "tail" : ": Boolean", "member" : "org.rogach.scallop.Scallop.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/Scallop.html#shortSubcommandsHelp:Boolean", "kind" : "val"}, {"label" : "helpWidth", "tail" : ": Option[Int]", "member" : "org.rogach.scallop.Scallop.helpWidth", "link" : "org\/rogach\/scallop\/Scallop.html#helpWidth:Option[Int]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.Scallop.descr", "link" : "org\/rogach\/scallop\/Scallop.html#descr:String", "kind" : "val"}, {"label" : "foot", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.foot", "link" : "org\/rogach\/scallop\/Scallop.html#foot:Option[String]", "kind" : "val"}, {"label" : "bann", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.bann", "link" : "org\/rogach\/scallop\/Scallop.html#bann:Option[String]", "kind" : "val"}, {"label" : "vers", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.vers", "link" : "org\/rogach\/scallop\/Scallop.html#vers:Option[String]", "kind" : "val"}, {"label" : "mainOpts", "tail" : ": List[String]", "member" : "org.rogach.scallop.Scallop.mainOpts", "link" : "org\/rogach\/scallop\/Scallop.html#mainOpts:List[String]", "kind" : "val"}, {"label" : "opts", "tail" : ": List[CliOption]", "member" : "org.rogach.scallop.Scallop.opts", "link" : "org\/rogach\/scallop\/Scallop.html#opts:List[org.rogach.scallop.CliOption]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.Scallop.args", "link" : "org\/rogach\/scallop\/Scallop.html#args:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Scallop.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Scallop.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Scallop.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Scallop.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Scallop.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Scallop.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Scallop.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Scallop.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Scallop.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Scallop.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Scallop.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Scallop.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Scallop.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/Scallop.html", "kind" : "object"}, {"name" : "org.rogach.scallop.ScallopConf", "shortDescription" : "", "members_class" : [{"label" : "verify", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.verify", "link" : "org\/rogach\/scallop\/ScallopConf.html#verify():Unit", "kind" : "def"}, {"label" : "verifyConf", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.verifyConf", "link" : "org\/rogach\/scallop\/ScallopConf.html#verifyConf():Unit", "kind" : "def"}, {"label" : "shortSubcommandsHelp", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopConf.html#shortSubcommandsHelp(v:Boolean):Unit", "kind" : "def"}, {"label" : "helpWidth", "tail" : "(w: Int): Unit", "member" : "org.rogach.scallop.ScallopConf.helpWidth", "link" : "org\/rogach\/scallop\/ScallopConf.html#helpWidth(w:Int):Unit", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Unit", "member" : "org.rogach.scallop.ScallopConf.footer", "link" : "org\/rogach\/scallop\/ScallopConf.html#footer(f:String):Unit", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Unit", "member" : "org.rogach.scallop.ScallopConf.banner", "link" : "org\/rogach\/scallop\/ScallopConf.html#banner(b:String):Unit", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Unit", "member" : "org.rogach.scallop.ScallopConf.version", "link" : "org\/rogach\/scallop\/ScallopConf.html#version(v:String):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.printHelp", "link" : "org\/rogach\/scallop\/ScallopConf.html#printHelp():Unit", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopConf.summary", "link" : "org\/rogach\/scallop\/ScallopConf.html#summary:String", "kind" : "def"}, {"label" : "validatePathExists", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConf.validatePathExists", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathExists(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validateFileIsFile", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileIsFile", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileIsFile(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileIsDirectory", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileIsDirectory(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileDoesNotExist", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileDoesNotExist(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileExists", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileExists", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileExists(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "allDefinedOrUndefined", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.allDefinedOrUndefined", "link" : "org\/rogach\/scallop\/ScallopConf.html#allDefinedOrUndefined(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "codependent", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.codependent", "link" : "org\/rogach\/scallop\/ScallopConf.html#codependent(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "mutuallyExclusive", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.mutuallyExclusive", "link" : "org\/rogach\/scallop\/ScallopConf.html#mutuallyExclusive(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.requireOne", "link" : "org\/rogach\/scallop\/ScallopConf.html#requireOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireAtLeastOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.requireAtLeastOne", "link" : "org\/rogach\/scallop\/ScallopConf.html#requireAtLeastOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "conflicts", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.conflicts", "link" : "org\/rogach\/scallop\/ScallopConf.html#conflicts(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAll", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.dependsOnAll", "link" : "org\/rogach\/scallop\/ScallopConf.html#dependsOnAll(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAny", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.dependsOnAny", "link" : "org\/rogach\/scallop\/ScallopConf.html#dependsOnAny(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "assertVerified", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.assertVerified", "link" : "org\/rogach\/scallop\/ScallopConf.html#assertVerified():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(e: Throwable): Unit", "member" : "org.rogach.scallop.ScallopConf.onError", "link" : "org\/rogach\/scallop\/ScallopConf.html#onError(e:Throwable):Unit", "kind" : "def"}, {"label" : "errorMessageHandler", "tail" : ": (String) ⇒ Unit", "member" : "org.rogach.scallop.ScallopConf.errorMessageHandler", "link" : "org\/rogach\/scallop\/ScallopConf.html#errorMessageHandler:String=>Unit", "kind" : "var"}, {"label" : "printedName", "tail" : ": String", "member" : "org.rogach.scallop.ScallopConf.printedName", "link" : "org\/rogach\/scallop\/ScallopConf.html#printedName:String", "kind" : "var"}, {"label" : "toggle", "tail" : "(name: String, default: ⇒ Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): ScallopOption[Boolean]", "member" : "org.rogach.scallop.ScallopConf.toggle", "link" : "org\/rogach\/scallop\/ScallopConf.html#toggle(name:String,default:=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.ScallopOption[Boolean]", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, descr: String, validate: (Long) ⇒ Boolean, required: Boolean, default: ⇒ Option[Long], hidden: Boolean)(conv: ValueConverter[Long]): ScallopOption[Long]", "member" : "org.rogach.scallop.ScallopConf.number", "link" : "org\/rogach\/scallop\/ScallopConf.html#number(name:String,descr:String,validate:Long=>Boolean,required:Boolean,default:=>Option[Long],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.ScallopOption[Long]", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, descr: String, validate: (A) ⇒ Boolean, required: Boolean, default: ⇒ Option[A], hidden: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConf.trailArg", "link" : "org\/rogach\/scallop\/ScallopConf.html#trailArg[A](name:String,descr:String,validate:A=>Boolean,required:Boolean,default:=>Option[A],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConf.propsLong", "link" : "org\/rogach\/scallop\/ScallopConf.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConf.props", "link" : "org\/rogach\/scallop\/ScallopConf.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "tally", "tail" : "(name: String, short: Char, descr: String, hidden: Boolean, noshort: Boolean): ScallopOption[Int]", "member" : "org.rogach.scallop.ScallopConf.tally", "link" : "org\/rogach\/scallop\/ScallopConf.html#tally(name:String,short:Char,descr:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[Int]", "kind" : "def"}, {"label" : "mainOptions_=", "tail" : "(newMainOptions: ⇒ Seq[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.mainOptions_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#mainOptions_=(newMainOptions:=>Seq[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "mainOptions", "tail" : "(): Seq[String]", "member" : "org.rogach.scallop.ScallopConf.mainOptions", "link" : "org\/rogach\/scallop\/ScallopConf.html#mainOptions:Seq[String]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: ⇒ Option[A], validate: (A) ⇒ Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConf.opt", "link" : "org\/rogach\/scallop\/ScallopConf.html#opt[A](name:String,short:Char,descr:String,default:=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "verified", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConf.verified", "link" : "org\/rogach\/scallop\/ScallopConf.html#verified:Boolean", "kind" : "var"}, {"label" : "subcommands", "tail" : "(): List[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subcommands", "link" : "org\/rogach\/scallop\/ScallopConf.html#subcommands:List[org.rogach.scallop.ScallopConf]", "kind" : "def"}, {"label" : "subcommand", "tail" : "(): Option[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subcommand", "link" : "org\/rogach\/scallop\/ScallopConf.html#subcommand:Option[org.rogach.scallop.ScallopConf]", "kind" : "def"}, {"label" : "appendDefaultToDescription_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.appendDefaultToDescription_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#appendDefaultToDescription_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "appendDefaultToDescription", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/ScallopConf.html#appendDefaultToDescription:Boolean", "kind" : "def"}, {"label" : "guessOptionName_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.guessOptionName_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#guessOptionName_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "guessOptionName", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.guessOptionName", "link" : "org\/rogach\/scallop\/ScallopConf.html#guessOptionName:Boolean", "kind" : "def"}, {"label" : "editBuilder", "tail" : "(fn: (Scallop) ⇒ Scallop): Unit", "member" : "org.rogach.scallop.ScallopConf.editBuilder", "link" : "org\/rogach\/scallop\/ScallopConf.html#editBuilder(fn:org.rogach.scallop.Scallop=>org.rogach.scallop.Scallop):Unit", "kind" : "def"}, {"label" : "builder", "tail" : ": Scallop", "member" : "org.rogach.scallop.ScallopConf.builder", "link" : "org\/rogach\/scallop\/ScallopConf.html#builder:org.rogach.scallop.Scallop", "kind" : "var"}, {"label" : "addSubcommand", "tail" : "(conf: Subcommand): Unit", "member" : "org.rogach.scallop.ScallopConf.addSubcommand", "link" : "org\/rogach\/scallop\/ScallopConf.html#addSubcommand(conf:org.rogach.scallop.Subcommand):Unit", "kind" : "def"}, {"label" : "subconfigs", "tail" : ": Seq[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subconfigs", "link" : "org\/rogach\/scallop\/ScallopConf.html#subconfigs:Seq[org.rogach.scallop.ScallopConf]", "kind" : "var"}, {"label" : "isRootConfig", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConf.isRootConfig", "link" : "org\/rogach\/scallop\/ScallopConf.html#isRootConfig:Boolean", "kind" : "var"}, {"label" : "parentConfig", "tail" : ": ScallopConf", "member" : "org.rogach.scallop.ScallopConf.parentConfig", "link" : "org\/rogach\/scallop\/ScallopConf.html#parentConfig:org.rogach.scallop.ScallopConf", "kind" : "var"}, {"member" : "org.rogach.scallop.ScallopConf#<init>", "error" : "unsupported entity"}, {"label" : "commandNameAndAliases", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConf.commandNameAndAliases", "link" : "org\/rogach\/scallop\/ScallopConf.html#commandNameAndAliases:Seq[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConf.args", "link" : "org\/rogach\/scallop\/ScallopConf.html#args:Seq[String]", "kind" : "val"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() ⇒ Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/ScallopConf.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopConf.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopConf.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopConf.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopConf.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopConf.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/ScallopConf.html", "kind" : "class"}, {"name" : "org.rogach.scallop.ScallopConfValidations", "members_trait" : [{"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() ⇒ Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Helper trait for generaton of validate methods on ScallopConf.", "trait" : "org\/rogach\/scallop\/ScallopConfValidations.html", "kind" : "trait"}, {"name" : "org.rogach.scallop.ScallopOption", "shortDescription" : "A class to hold a reference to not-yet-computed option values.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopOption.toString", "link" : "org\/rogach\/scallop\/ScallopOption.html#toString():String", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isEmpty", "link" : "org\/rogach\/scallop\/ScallopOption.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isDefined", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isDefined", "link" : "org\/rogach\/scallop\/ScallopOption.html#isDefined:Boolean", "kind" : "def"}, {"label" : "orElse", "tail" : "(alternative: ⇒ Option[B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.orElse", "link" : "org\/rogach\/scallop\/ScallopOption.html#orElse[B>:A](alternative:=>Option[B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ ScallopOption[B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.flatMap", "link" : "org\/rogach\/scallop\/ScallopOption.html#flatMap[B](f:A=>org.rogach.scallop.ScallopOption[B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ Unit): Unit", "member" : "org.rogach.scallop.ScallopOption.foreach", "link" : "org\/rogach\/scallop\/ScallopOption.html#foreach(f:A=>Unit):Unit", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.map", "link" : "org\/rogach\/scallop\/ScallopOption.html#map[B](f:A=>B):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "WithFilter", "tail" : "", "member" : "org.rogach.scallop.ScallopOption.WithFilter", "link" : "org\/rogach\/scallop\/ScallopOption.html#WithFilterextendsAnyRef", "kind" : "class"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): WithFilter", "member" : "org.rogach.scallop.ScallopOption.withFilter", "link" : "org\/rogach\/scallop\/ScallopOption.html#withFilter(p:A=>Boolean):ScallopOption.this.WithFilter", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (A) ⇒ Boolean): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopOption.filterNot", "link" : "org\/rogach\/scallop\/ScallopOption.html#filterNot(p:A=>Boolean):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopOption.filter", "link" : "org\/rogach\/scallop\/ScallopOption.html#filter(p:A=>Boolean):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.collect", "link" : "org\/rogach\/scallop\/ScallopOption.html#collect[B](pf:PartialFunction[A,B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "isSupplied", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isSupplied", "link" : "org\/rogach\/scallop\/ScallopOption.html#isSupplied:Boolean", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(default: ⇒ A): A", "member" : "org.rogach.scallop.ScallopOption.getOrElse", "link" : "org\/rogach\/scallop\/ScallopOption.html#getOrElse(default:=>A):A", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "org.rogach.scallop.ScallopOption.apply", "link" : "org\/rogach\/scallop\/ScallopOption.html#apply():A", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[A]", "member" : "org.rogach.scallop.ScallopOption.toOption", "link" : "org\/rogach\/scallop\/ScallopOption.html#toOption:Option[A]", "kind" : "def"}, {"label" : "get", "tail" : "(): Option[A]", "member" : "org.rogach.scallop.ScallopOption.get", "link" : "org\/rogach\/scallop\/ScallopOption.html#get:Option[A]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopOption.name", "link" : "org\/rogach\/scallop\/ScallopOption.html#name:String", "kind" : "def"}, {"label" : "supplied", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopOption.supplied", "link" : "org\/rogach\/scallop\/ScallopOption.html#supplied:Boolean", "kind" : "lazy val"}, {"label" : "fn", "tail" : ": (String) ⇒ Option[A]", "member" : "org.rogach.scallop.ScallopOption.fn", "link" : "org\/rogach\/scallop\/ScallopOption.html#fn:String=>Option[A]", "kind" : "lazy val"}, {"member" : "org.rogach.scallop.ScallopOption#<init>", "error" : "unsupported entity"}, {"label" : "_transformCount", "tail" : ": Int", "member" : "org.rogach.scallop.ScallopOption._transformCount", "link" : "org\/rogach\/scallop\/ScallopOption.html#_transformCount:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/ScallopOption.html", "kind" : "class"}, {"name" : "org.rogach.scallop.SimpleOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, Option[String])]", "member" : "org.rogach.scallop.SimpleOption.helpInfo", "link" : "org\/rogach\/scallop\/SimpleOption.html#helpInfo(sh:List[Char]):List[(String,String,Option[String])]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.SimpleOption.argLine", "link" : "org\/rogach\/scallop\/SimpleOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.SimpleOption.requiredShortNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.SimpleOption.shortNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.SimpleOption.longNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.SimpleOption.isPositional", "link" : "org\/rogach\/scallop\/SimpleOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.SimpleOption#<init>", "error" : "unsupported entity"}, {"label" : "noshort", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.noshort", "link" : "org\/rogach\/scallop\/SimpleOption.html#noshort:Boolean", "kind" : "val"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.hidden", "link" : "org\/rogach\/scallop\/SimpleOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "argName", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.argName", "link" : "org\/rogach\/scallop\/SimpleOption.html#argName:String", "kind" : "val"}, {"label" : "validator", "tail" : ": (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.SimpleOption.validator", "link" : "org\/rogach\/scallop\/SimpleOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () ⇒ Option[Any]", "member" : "org.rogach.scallop.SimpleOption.default", "link" : "org\/rogach\/scallop\/SimpleOption.html#default:()=>Option[Any]", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.SimpleOption.converter", "link" : "org\/rogach\/scallop\/SimpleOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.required", "link" : "org\/rogach\/scallop\/SimpleOption.html#required:Boolean", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.descr", "link" : "org\/rogach\/scallop\/SimpleOption.html#descr:String", "kind" : "val"}, {"label" : "short", "tail" : ": Option[Char]", "member" : "org.rogach.scallop.SimpleOption.short", "link" : "org\/rogach\/scallop\/SimpleOption.html#short:Option[Char]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.name", "link" : "org\/rogach\/scallop\/SimpleOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/SimpleOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/SimpleOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/SimpleOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/SimpleOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/SimpleOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/SimpleOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/SimpleOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/SimpleOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/SimpleOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/SimpleOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/SimpleOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/SimpleOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/SimpleOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/SimpleOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.Subcommand", "shortDescription" : "", "members_class" : [{"label" : "descr", "tail" : "(d: String): Unit", "member" : "org.rogach.scallop.Subcommand.descr", "link" : "org\/rogach\/scallop\/Subcommand.html#descr(d:String):Unit", "kind" : "def"}, {"member" : "org.rogach.scallop.Subcommand#<init>", "error" : "unsupported entity"}, {"label" : "verify", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.verify", "link" : "org\/rogach\/scallop\/Subcommand.html#verify():Unit", "kind" : "def"}, {"label" : "verifyConf", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.verifyConf", "link" : "org\/rogach\/scallop\/Subcommand.html#verifyConf():Unit", "kind" : "def"}, {"label" : "shortSubcommandsHelp", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/Subcommand.html#shortSubcommandsHelp(v:Boolean):Unit", "kind" : "def"}, {"label" : "helpWidth", "tail" : "(w: Int): Unit", "member" : "org.rogach.scallop.ScallopConf.helpWidth", "link" : "org\/rogach\/scallop\/Subcommand.html#helpWidth(w:Int):Unit", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Unit", "member" : "org.rogach.scallop.ScallopConf.footer", "link" : "org\/rogach\/scallop\/Subcommand.html#footer(f:String):Unit", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Unit", "member" : "org.rogach.scallop.ScallopConf.banner", "link" : "org\/rogach\/scallop\/Subcommand.html#banner(b:String):Unit", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Unit", "member" : "org.rogach.scallop.ScallopConf.version", "link" : "org\/rogach\/scallop\/Subcommand.html#version(v:String):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.printHelp", "link" : "org\/rogach\/scallop\/Subcommand.html#printHelp():Unit", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopConf.summary", "link" : "org\/rogach\/scallop\/Subcommand.html#summary:String", "kind" : "def"}, {"label" : "validatePathExists", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConf.validatePathExists", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathExists(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validateFileIsFile", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileIsFile", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileIsFile(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileIsDirectory", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileIsDirectory", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileIsDirectory(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileDoesNotExist", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileDoesNotExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileDoesNotExist(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileExists", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConf.validateFileExists", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileExists(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "allDefinedOrUndefined", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.allDefinedOrUndefined", "link" : "org\/rogach\/scallop\/Subcommand.html#allDefinedOrUndefined(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "codependent", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.codependent", "link" : "org\/rogach\/scallop\/Subcommand.html#codependent(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "mutuallyExclusive", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.mutuallyExclusive", "link" : "org\/rogach\/scallop\/Subcommand.html#mutuallyExclusive(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.requireOne", "link" : "org\/rogach\/scallop\/Subcommand.html#requireOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireAtLeastOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConf.requireAtLeastOne", "link" : "org\/rogach\/scallop\/Subcommand.html#requireAtLeastOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "conflicts", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.conflicts", "link" : "org\/rogach\/scallop\/Subcommand.html#conflicts(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAll", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.dependsOnAll", "link" : "org\/rogach\/scallop\/Subcommand.html#dependsOnAll(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAny", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.dependsOnAny", "link" : "org\/rogach\/scallop\/Subcommand.html#dependsOnAny(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "assertVerified", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.assertVerified", "link" : "org\/rogach\/scallop\/Subcommand.html#assertVerified():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(e: Throwable): Unit", "member" : "org.rogach.scallop.ScallopConf.onError", "link" : "org\/rogach\/scallop\/Subcommand.html#onError(e:Throwable):Unit", "kind" : "def"}, {"label" : "errorMessageHandler", "tail" : ": (String) ⇒ Unit", "member" : "org.rogach.scallop.ScallopConf.errorMessageHandler", "link" : "org\/rogach\/scallop\/Subcommand.html#errorMessageHandler:String=>Unit", "kind" : "var"}, {"label" : "printedName", "tail" : ": String", "member" : "org.rogach.scallop.ScallopConf.printedName", "link" : "org\/rogach\/scallop\/Subcommand.html#printedName:String", "kind" : "var"}, {"label" : "toggle", "tail" : "(name: String, default: ⇒ Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): ScallopOption[Boolean]", "member" : "org.rogach.scallop.ScallopConf.toggle", "link" : "org\/rogach\/scallop\/Subcommand.html#toggle(name:String,default:=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.ScallopOption[Boolean]", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, descr: String, validate: (Long) ⇒ Boolean, required: Boolean, default: ⇒ Option[Long], hidden: Boolean)(conv: ValueConverter[Long]): ScallopOption[Long]", "member" : "org.rogach.scallop.ScallopConf.number", "link" : "org\/rogach\/scallop\/Subcommand.html#number(name:String,descr:String,validate:Long=>Boolean,required:Boolean,default:=>Option[Long],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.ScallopOption[Long]", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, descr: String, validate: (A) ⇒ Boolean, required: Boolean, default: ⇒ Option[A], hidden: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConf.trailArg", "link" : "org\/rogach\/scallop\/Subcommand.html#trailArg[A](name:String,descr:String,validate:A=>Boolean,required:Boolean,default:=>Option[A],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConf.propsLong", "link" : "org\/rogach\/scallop\/Subcommand.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConf.props", "link" : "org\/rogach\/scallop\/Subcommand.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "tally", "tail" : "(name: String, short: Char, descr: String, hidden: Boolean, noshort: Boolean): ScallopOption[Int]", "member" : "org.rogach.scallop.ScallopConf.tally", "link" : "org\/rogach\/scallop\/Subcommand.html#tally(name:String,short:Char,descr:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[Int]", "kind" : "def"}, {"label" : "mainOptions_=", "tail" : "(newMainOptions: ⇒ Seq[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConf.mainOptions_=", "link" : "org\/rogach\/scallop\/Subcommand.html#mainOptions_=(newMainOptions:=>Seq[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "mainOptions", "tail" : "(): Seq[String]", "member" : "org.rogach.scallop.ScallopConf.mainOptions", "link" : "org\/rogach\/scallop\/Subcommand.html#mainOptions:Seq[String]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: ⇒ Option[A], validate: (A) ⇒ Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConf.opt", "link" : "org\/rogach\/scallop\/Subcommand.html#opt[A](name:String,short:Char,descr:String,default:=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "verified", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConf.verified", "link" : "org\/rogach\/scallop\/Subcommand.html#verified:Boolean", "kind" : "var"}, {"label" : "subcommands", "tail" : "(): List[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subcommands", "link" : "org\/rogach\/scallop\/Subcommand.html#subcommands:List[org.rogach.scallop.ScallopConf]", "kind" : "def"}, {"label" : "subcommand", "tail" : "(): Option[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subcommand", "link" : "org\/rogach\/scallop\/Subcommand.html#subcommand:Option[org.rogach.scallop.ScallopConf]", "kind" : "def"}, {"label" : "appendDefaultToDescription_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.appendDefaultToDescription_=", "link" : "org\/rogach\/scallop\/Subcommand.html#appendDefaultToDescription_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "appendDefaultToDescription", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/Subcommand.html#appendDefaultToDescription:Boolean", "kind" : "def"}, {"label" : "guessOptionName_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.guessOptionName_=", "link" : "org\/rogach\/scallop\/Subcommand.html#guessOptionName_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "guessOptionName", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.guessOptionName", "link" : "org\/rogach\/scallop\/Subcommand.html#guessOptionName:Boolean", "kind" : "def"}, {"label" : "editBuilder", "tail" : "(fn: (Scallop) ⇒ Scallop): Unit", "member" : "org.rogach.scallop.ScallopConf.editBuilder", "link" : "org\/rogach\/scallop\/Subcommand.html#editBuilder(fn:org.rogach.scallop.Scallop=>org.rogach.scallop.Scallop):Unit", "kind" : "def"}, {"label" : "builder", "tail" : ": Scallop", "member" : "org.rogach.scallop.ScallopConf.builder", "link" : "org\/rogach\/scallop\/Subcommand.html#builder:org.rogach.scallop.Scallop", "kind" : "var"}, {"label" : "addSubcommand", "tail" : "(conf: Subcommand): Unit", "member" : "org.rogach.scallop.ScallopConf.addSubcommand", "link" : "org\/rogach\/scallop\/Subcommand.html#addSubcommand(conf:org.rogach.scallop.Subcommand):Unit", "kind" : "def"}, {"label" : "subconfigs", "tail" : ": Seq[ScallopConf]", "member" : "org.rogach.scallop.ScallopConf.subconfigs", "link" : "org\/rogach\/scallop\/Subcommand.html#subconfigs:Seq[org.rogach.scallop.ScallopConf]", "kind" : "var"}, {"label" : "isRootConfig", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConf.isRootConfig", "link" : "org\/rogach\/scallop\/Subcommand.html#isRootConfig:Boolean", "kind" : "var"}, {"label" : "parentConfig", "tail" : ": ScallopConf", "member" : "org.rogach.scallop.ScallopConf.parentConfig", "link" : "org\/rogach\/scallop\/Subcommand.html#parentConfig:org.rogach.scallop.ScallopConf", "kind" : "var"}, {"label" : "commandNameAndAliases", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConf.commandNameAndAliases", "link" : "org\/rogach\/scallop\/Subcommand.html#commandNameAndAliases:Seq[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConf.args", "link" : "org\/rogach\/scallop\/Subcommand.html#args:Seq[String]", "kind" : "val"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) ⇒ Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() ⇒ Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/Subcommand.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Subcommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Subcommand.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Subcommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Subcommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Subcommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Subcommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Subcommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Subcommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Subcommand.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Subcommand.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Subcommand.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Subcommand.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Subcommand.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Subcommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Subcommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Subcommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/Subcommand.html", "kind" : "class"}, {"name" : "org.rogach.scallop.throwError", "shortDescription" : "Convenience variable to permit testing.", "object" : "org\/rogach\/scallop\/throwError$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.util.DynamicVariable.toString", "link" : "org\/rogach\/scallop\/throwError$.html#toString():String", "kind" : "def"}, {"label" : "value_=", "tail" : "(newval: Boolean): Unit", "member" : "scala.util.DynamicVariable.value_=", "link" : "org\/rogach\/scallop\/throwError$.html#value_=(newval:T):Unit", "kind" : "def"}, {"label" : "withValue", "tail" : "(newval: Boolean)(thunk: ⇒ S): S", "member" : "scala.util.DynamicVariable.withValue", "link" : "org\/rogach\/scallop\/throwError$.html#withValue[S](newval:T)(thunk:=>S):S", "kind" : "def"}, {"label" : "value", "tail" : "(): Boolean", "member" : "scala.util.DynamicVariable.value", "link" : "org\/rogach\/scallop\/throwError$.html#value:T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/throwError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/throwError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/throwError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/throwError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/throwError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/throwError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/throwError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/throwError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/throwError$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/throwError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/throwError$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/throwError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/throwError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/throwError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/throwError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.ToggleOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, None.type)]", "member" : "org.rogach.scallop.ToggleOption.helpInfo", "link" : "org\/rogach\/scallop\/ToggleOption.html#helpInfo(sh:List[Char]):List[(String,String,None.type)]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.ToggleOption.argLine", "link" : "org\/rogach\/scallop\/ToggleOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "converter", "tail" : "(): ValueConverter[Boolean]", "member" : "org.rogach.scallop.ToggleOption.converter", "link" : "org\/rogach\/scallop\/ToggleOption.html#converter:org.rogach.scallop.ValueConverter[Boolean]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.ToggleOption.longNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.ToggleOption.requiredShortNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.ToggleOption.shortNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ToggleOption.required", "link" : "org\/rogach\/scallop\/ToggleOption.html#required:Boolean", "kind" : "def"}, {"label" : "validator", "tail" : "(): (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.ToggleOption.validator", "link" : "org\/rogach\/scallop\/ToggleOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ToggleOption.isPositional", "link" : "org\/rogach\/scallop\/ToggleOption.html#isPositional:Boolean", "kind" : "def"}, {"label" : "descr", "tail" : "(): String", "member" : "org.rogach.scallop.ToggleOption.descr", "link" : "org\/rogach\/scallop\/ToggleOption.html#descr:String", "kind" : "def"}, {"member" : "org.rogach.scallop.ToggleOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.ToggleOption.hidden", "link" : "org\/rogach\/scallop\/ToggleOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "descrNo", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.descrNo", "link" : "org\/rogach\/scallop\/ToggleOption.html#descrNo:String", "kind" : "val"}, {"label" : "descrYes", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.descrYes", "link" : "org\/rogach\/scallop\/ToggleOption.html#descrYes:String", "kind" : "val"}, {"label" : "prefix", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.prefix", "link" : "org\/rogach\/scallop\/ToggleOption.html#prefix:String", "kind" : "val"}, {"label" : "noshort", "tail" : ": Boolean", "member" : "org.rogach.scallop.ToggleOption.noshort", "link" : "org\/rogach\/scallop\/ToggleOption.html#noshort:Boolean", "kind" : "val"}, {"label" : "short", "tail" : ": Option[Char]", "member" : "org.rogach.scallop.ToggleOption.short", "link" : "org\/rogach\/scallop\/ToggleOption.html#short:Option[Char]", "kind" : "val"}, {"label" : "default", "tail" : ": () ⇒ Option[Boolean]", "member" : "org.rogach.scallop.ToggleOption.default", "link" : "org\/rogach\/scallop\/ToggleOption.html#default:()=>Option[Boolean]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.name", "link" : "org\/rogach\/scallop\/ToggleOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ToggleOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ToggleOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ToggleOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ToggleOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ToggleOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ToggleOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ToggleOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ToggleOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ToggleOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ToggleOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ToggleOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ToggleOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ToggleOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/ToggleOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.TrailingArgsOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[(String, String, Option[String])]", "member" : "org.rogach.scallop.TrailingArgsOption.helpInfo", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#helpInfo(sh:List[Char]):List[(String,String,Option[String])]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.TrailingArgsOption.argLine", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.TrailingArgsOption.requiredShortNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.TrailingArgsOption.shortNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil.type", "member" : "org.rogach.scallop.TrailingArgsOption.longNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.isPositional", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.TrailingArgsOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.hidden", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () ⇒ Option[Any]", "member" : "org.rogach.scallop.TrailingArgsOption.default", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#default:()=>Option[Any]", "kind" : "val"}, {"label" : "validator", "tail" : ": (scala.reflect.api.JavaUniverse.TypeTag[_], Any) ⇒ Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.validator", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#validator:(reflect.runtime.universe.TypeTag[_],Any)=>Boolean", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.TrailingArgsOption.converter", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.TrailingArgsOption.descr", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#descr:String", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.required", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#required:Boolean", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.TrailingArgsOption.name", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/TrailingArgsOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.TrailingArgumentsParser", "shortDescription" : "Parses the trailing arguments (including the arguments to last option).", "object" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html", "members_object" : [{"label" : "parse", "tail" : "(args: List[String], convs: List[(ValueConverter[_], String, Boolean)]): ParseResult", "member" : "org.rogach.scallop.TrailingArgumentsParser.parse", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#parse(args:List[String],convs:List[(org.rogach.scallop.ValueConverter[_],String,Boolean)]):org.rogach.scallop.TrailingArgumentsParser.ParseResult", "kind" : "def"}, {"label" : "ParseResult", "tail" : "", "member" : "org.rogach.scallop.TrailingArgumentsParser.ParseResult", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#ParseResultextendsOrdered[org.rogach.scallop.TrailingArgumentsParser.ParseResult]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.ValueConverter", "members_trait" : [{"label" : "flatMap", "tail" : "(fn: (A) ⇒ Either[String, Option[B]])(tt: scala.reflect.api.JavaUniverse.TypeTag[B]): ValueConverter[B]", "member" : "org.rogach.scallop.ValueConverter.flatMap", "link" : "org\/rogach\/scallop\/ValueConverter.html#flatMap[B](fn:A=>Either[String,Option[B]])(implicittt:reflect.runtime.universe.TypeTag[B]):org.rogach.scallop.ValueConverter[B]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (A) ⇒ B)(tt: scala.reflect.api.JavaUniverse.TypeTag[B]): ValueConverter[B]", "member" : "org.rogach.scallop.ValueConverter.map", "link" : "org\/rogach\/scallop\/ValueConverter.html#map[B](fn:A=>B)(implicittt:reflect.runtime.universe.TypeTag[B]):org.rogach.scallop.ValueConverter[B]", "kind" : "def"}, {"label" : "argFormat", "tail" : "(name: String): String", "member" : "org.rogach.scallop.ValueConverter.argFormat", "link" : "org\/rogach\/scallop\/ValueConverter.html#argFormat(name:String):String", "kind" : "def"}, {"label" : "parseCached", "tail" : "(s: List[(String, List[String])]): Either[String, Option[A]]", "member" : "org.rogach.scallop.ValueConverter.parseCached", "link" : "org\/rogach\/scallop\/ValueConverter.html#parseCached(s:List[(String,List[String])]):Either[String,Option[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ValueConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ValueConverter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ValueConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ValueConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ValueConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ValueConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ValueConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ValueConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ValueConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ValueConverter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ValueConverter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ValueConverter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ValueConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ValueConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ValueConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ValueConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "argType", "tail" : ": V", "member" : "org.rogach.scallop.ValueConverter.argType", "link" : "org\/rogach\/scallop\/ValueConverter.html#argType:org.rogach.scallop.ArgType.V", "kind" : "abstract val"}, {"label" : "tag", "tail" : ": scala.reflect.api.JavaUniverse.TypeTag[A]", "member" : "org.rogach.scallop.ValueConverter.tag", "link" : "org\/rogach\/scallop\/ValueConverter.html#tag:reflect.runtime.universe.TypeTag[A]", "kind" : "abstract val"}, {"label" : "parse", "tail" : "(s: List[(String, List[String])]): Either[String, Option[A]]", "member" : "org.rogach.scallop.ValueConverter.parse", "link" : "org\/rogach\/scallop\/ValueConverter.html#parse(s:List[(String,List[String])]):Either[String,Option[A]]", "kind" : "abstract def"}], "shortDescription" : "Converter from list of plain strings to something meaningful.", "trait" : "org\/rogach\/scallop\/ValueConverter.html", "kind" : "trait"}], "org.rogach.scallop.exceptions" : [{"name" : "org.rogach.scallop.exceptions.ExcessArguments", "shortDescription" : "Thrown when user provides excess arguments that can't be matched by trailing arg options", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.ExcessArguments#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.exceptions.ExcessArguments.args", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#args:Seq[String]", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Exit", "shortDescription" : "Extractor object, for matching on both Help and Version results.", "object" : "org\/rogach\/scallop\/exceptions\/Exit$.html", "members_object" : [{"label" : "unapply", "tail" : "(r: ScallopResult): Boolean", "member" : "org.rogach.scallop.exceptions.Exit.unapply", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#unapply(r:org.rogach.scallop.exceptions.ScallopResult):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.exceptions.GenericScallopException", "shortDescription" : "", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.GenericScallopException#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.GenericScallopException.msg", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#msg:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Help", "shortDescription" : "Thrown when user requested help output (via \"--help\")", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.Help#<init>", "error" : "unsupported entity"}, {"label" : "command", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.Help.command", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#command:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Help.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/Help.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IdenticalOptionNames", "shortDescription" : "Thrown when several options and\/or trailing arguments have identical names    in definition - making it impossible to distinguish between them.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IdenticalOptionNames#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.IdenticalOptionNames.mess", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#mess:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IllegalOptionParameters", "shortDescription" : "Thrown when user tried to create an option with some illegal parameters", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IllegalOptionParameters#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.IllegalOptionParameters.mess", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#mess:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IncompleteBuildException", "shortDescription" : "Thrown when user tried to extract the value of an option before the call    to verify in ScallopConf.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IncompleteBuildException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.MajorInternalException", "shortDescription" : "This is a special case of exception - the one you should never see.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.MajorInternalException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.OptionNameGuessingFailure", "shortDescription" : "Thrown when option guessing fails on one of the options.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.OptionNameGuessingFailure#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.RequiredOptionNotFound", "shortDescription" : "Thrown when parser failed to find arguments to option (marked as 'required')    in the input arguments.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.RequiredOptionNotFound#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.RequiredOptionNotFound.name", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#name:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.ScallopException", "shortDescription" : "Parent class for all exceptions thrown from this library.", "object" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html", "members_class" : [{"member" : "org.rogach.scallop.exceptions.ScallopException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(e: ScallopException): Option[String]", "member" : "org.rogach.scallop.exceptions.ScallopException.unapply", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#unapply(e:org.rogach.scallop.exceptions.ScallopException):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/exceptions\/ScallopException.html", "kind" : "class"}, {"name" : "org.rogach.scallop.exceptions.ScallopResult", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Parent trait for all not-positive results that can be resulted from this library (including help and exits)", "trait" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html", "kind" : "trait"}, {"name" : "org.rogach.scallop.exceptions.UnknownOption", "shortDescription" : "Thrown when user provides Scallop with unknown option name in the arguments    or requests unknown option result from parser.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.UnknownOption#<init>", "error" : "unsupported entity"}, {"label" : "optionName", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.UnknownOption.optionName", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#optionName:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.ValidationFailure", "shortDescription" : "Thrown when the validation failed on some option.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.ValidationFailure#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ValidationFailure.mess", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#mess:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Version", "shortDescription" : "Thrown when user requested version printout (via \"--version\")", "object" : "org\/rogach\/scallop\/exceptions\/Version$.html", "members_object" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.exceptions.WrongOptionFormat", "shortDescription" : "Thrown when arguments to some option do not satisfy that option's    value converter (it returns Left in such case).", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.WrongOptionFormat#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.msg", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#msg:String", "kind" : "val"}, {"label" : "args", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.args", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#args:String", "kind" : "val"}, {"label" : "optionName", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.optionName", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#optionName:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.WrongTypeRequest", "shortDescription" : "Thrown when the user requests wrong type of option argument from Scallop.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.WrongTypeRequest#<init>", "error" : "unsupported entity"}, {"label" : "required", "tail" : ": scala.reflect.api.JavaUniverse.TypeTag[_]", "member" : "org.rogach.scallop.exceptions.WrongTypeRequest.required", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#required:reflect.runtime.universe.TypeTag[_]", "kind" : "val"}, {"label" : "requested", "tail" : ": scala.reflect.api.JavaUniverse.TypeTag[_]", "member" : "org.rogach.scallop.exceptions.WrongTypeRequest.requested", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#requested:reflect.runtime.universe.TypeTag[_]", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/WrongTypeRequest.html", "kind" : "case class"}]};